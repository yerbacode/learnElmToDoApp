/* eslint-disable @typescript-eslint/ban-ts-comment */
//@ts-ignore
import { toESModule } from 'elm-esm';
//@ts-ignore
import compiler from 'node-elm-compiler';
import { normalize, relative, dirname } from 'path';
import { findUp } from 'find-up';
import { injectAssets } from './assetsInjector.js';
import { injectHMR } from './hmrInjector.js';
import { acquireLock } from './mutex.js';
import { parseOptions } from './pluginOptions.js';
/* eslint-enable @typescript-eslint/ban-ts-comment */
const trimDebugMessage = (code) => code.replace(/(console\.warn\('Compiled in DEBUG mode)/, '// $1');
const viteProjectPath = (dependency) => `/${relative(process.cwd(), dependency)}`;
const parseImportId = (id) => {
    const parsedId = new URL(id, 'file://');
    const pathname = parsedId.pathname;
    const valid = pathname.endsWith('.elm') && !parsedId.searchParams.has('raw');
    const withParams = parsedId.searchParams.getAll('with');
    return {
        valid,
        pathname,
        withParams,
    };
};
const findClosestElmJson = async (pathname) => {
    const elmJson = await findUp('elm.json', { cwd: dirname(pathname) });
    return elmJson ? dirname(elmJson) : undefined;
};
export const plugin = (userOptions = {}) => {
    const options = parseOptions(userOptions);
    const compilableFiles = new Map();
    return {
        name: 'vite-plugin-elm',
        enforce: 'pre',
        handleHotUpdate({ file, server, modules }) {
            const { valid } = parseImportId(file);
            if (!valid)
                return;
            const modulesToCompile = [];
            compilableFiles.forEach((dependencies, compilableFile) => {
                if (dependencies.has(normalize(file))) {
                    const module = server.moduleGraph.getModuleById(compilableFile);
                    if (module)
                        modulesToCompile.push(module);
                }
            });
            if (modulesToCompile.length > 0) {
                server.ws.send({
                    type: 'custom',
                    event: 'hot-update-dependents',
                    data: modulesToCompile.map(({ url }) => url),
                });
                return modulesToCompile;
            }
            else {
                return modules;
            }
        },
        async load(id) {
            const { valid, pathname, withParams } = parseImportId(id);
            if (!valid)
                return;
            const accompanies = await (() => {
                if (withParams.length > 0) {
                    const importTree = this.getModuleIds();
                    let importer = '';
                    for (const moduleId of importTree) {
                        if (moduleId === id)
                            break;
                        importer = moduleId;
                    }
                    const resolveAccompany = async (accompany) => (await this.resolve(accompany, importer))?.id ?? '';
                    return Promise.all(withParams.map(resolveAccompany));
                }
                else {
                    return Promise.resolve([]);
                }
            })();
            const targets = [pathname, ...accompanies].filter((target) => target !== '');
            compilableFiles.delete(id);
            const dependencies = (await Promise.all(targets.map((target) => compiler.findAllDependencies(target)))).flat();
            compilableFiles.set(id, new Set([...accompanies, ...dependencies]));
            const releaseLock = await acquireLock();
            try {
                const compiled = await compiler.compileToString(targets, {
                    output: '.js',
                    optimize: options.optimize,
                    verbose: options.isBuild,
                    debug: options.debug,
                    cwd: await findClosestElmJson(pathname),
                    ...options.nodeElmCompilerOptionsOverwrite,
                });
                const esm = injectAssets(toESModule(compiled));
                // Apparently `addWatchFile` may not exist: https://github.com/hmsk/vite-plugin-elm/pull/36
                if (this.addWatchFile) {
                    dependencies.forEach(this.addWatchFile.bind(this));
                }
                return {
                    code: options.isBuild ? esm : trimDebugMessage(injectHMR(esm, dependencies.map(viteProjectPath))),
                    map: null,
                };
            }
            catch (e) {
                if (e instanceof Error && e.message.includes('-- NO MAIN')) {
                    const message = `${viteProjectPath(pathname)}: NO MAIN .elm file is requested to transform by vite. Probably, this file is just a depending module`;
                    throw message;
                }
                else {
                    throw e;
                }
            }
            finally {
                releaseLock();
            }
        },
    };
};
export default plugin;
//# sourceMappingURL=index.js.map